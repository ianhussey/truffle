---
title: "truffles vignette"
author: "Ian Hussey"
date: today
format:
  html:
    code-fold: show
    highlight-style: haddock
    theme: flatly
    toc: true
    toc-location: left
execute:
  warning: false
  message: false
---

{truffle} creates datasets with various known effects to be rediscovered, for teaching purposes. Datasets contain demographics data and item-level Likert responses. Known effects (truffles) can be buried in the data including differences in sum-score means between conditions, known correlations between the different outcomes' sum-scores, known Cronbach's alpha values for each scale, etc. Data can also be made messy, contain impossible values, or contain missingness, to create data processing challenges.

The package's functions are currently quite fragile: it is designed for a specific internal use case in our teaching and not (yet) highly flexible, nor does it contain tests or handle errors or make them visible. Currently it can only generate data for a single design: a between groups experiment with equal sample sizes.

## Dependencies

```{r}

#devtools::install_github("ianhussey/truffle")
library(truffle)

# needed by truffle
library(lavaan)
library(dplyr)
library(tidyr)
library(tidyselect)
library(latent2likert)
library(ggplot2)
library(missMethods)

# not needed by truffle but used in this script
library(janitor)

```

## Create truffle

### Generate clean data

- Item level Likert data (no choice)
- Between subjects experiment (control vs intervention) (2 conditions only, but can be renamed)
- Three outcome variables (arbitrary number)
- Known Cronbach's alpha for each scale (arbitrary number)
- Known number of items per scale (arbitrary number)
- Known number of Likert response options (1:k)
- Known correlations between the latent scale scores
- Known APPROXIMATE Cohen's d between the two conditions' latent scale scores (arbitrary number, but recovered value will differ due to reliability, distortion due to converting continuous data to Likert, etc.)

```{r}

dat_truffle <- 
  generate_data_likert_two_conditions(n_per_condition = 20,
                                      factors  = c("X1_latent", "X2_latent", "X3_latent"),
                                      prefixes = c("X1_item", "X2_item", "X3_item"),
                                      alpha = c(.70, .75, .80),
                                      n_items = c(10, 7, 15),
                                      n_levels = 7,
                                      r_among_outcomes = 0.50,
                                      approx_d_between_groups = 0.50,
                                      seed = 42) |>
  add_demographics() 

head(dat_truffle, n = 10)

```

### Sum scores by scale

```{r}

dat_truffle_sumscores <- dat_truffle |>
  add_sum_scores_by_scale() |>
  select(condition, X1_sum, X2_sum, X3_sum)

head(dat_truffle_sumscores, n = 10)

# N, M, SD
dat_truffle_sumscores |>
  pivot_longer(cols = starts_with("X"),
               names_to = "scale",
               values_to = "sum_score") |>
  group_by(scale, condition) |>
  summarize(n = n(),
            mean = mean(sum_score, na.rm = TRUE),
            sd = sd(sum_score, na.rm = TRUE)) |>
  mutate_if(is.numeric, round_half_up, digits = 2)

```

Check that the sum scores conform to the predefined properties and that the item level data is approximately normal.

```{r}
#| fig-height: 20
#| fig-width: 20

check_generated_data(dat_truffle)

```

## Create dirt

### Messy demographics

Generate data for the same study but make the demographics data mess, add missingness, and add impossible values to the item level data.

```{r}

dat_truffle_and_dirt <- 
  generate_data_likert_two_conditions(n_per_condition = 20,
                                      factors  = c("X1_latent", "X2_latent", "X3_latent"),
                                      prefixes = c("X1_item", "X2_item", "X3_item"),
                                      alpha = c(.70, .75, .80),
                                      n_items = c(10, 7, 15),
                                      n_levels = 7,
                                      r_among_outcomes = 0.50,
                                      approx_d_between_groups = 0.50,
                                      seed = 42) |>
  add_demographics_messy() 

head(dat_truffle_and_dirt, n = 10)

```

### Missingness

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  add_missingness(proportion_missing = .05) 

head(dat_truffle_and_dirt, n = 10)

```

## Messy missingness

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  add_missingness_messy(proportion_missing = .05)

head(dat_truffle_and_dirt, n = 10)

```

### Impossible values ('outliers')

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  add_impossible_values(proportion_impossible = .04, replacement_value = 8)

head(dat_truffle_and_dirt, n = 10)

```

## Duplicate rows

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  add_duplicates(prop = 0.05)

head(dat_truffle_and_dirt, n = 10)

```

## Generate reaction times

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  mutate(completion_time = generate_reaction_times(n = n()))

head(dat_truffle_and_dirt, n = 10)

ggplot(dat_truffle_and_dirt, aes(completion_time)) +
  geom_histogram()

```

## Messy number formatting

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  mutate(completion_time = messy_numbers(completion_time))

head(dat_truffle_and_dirt, n = 10)

```

## Messy dates

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  mutate(date = add_dates_messy(n = n()))

head(dat_truffle_and_dirt, n = 10)

```

## Add block_trial

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  add_non_tidy_column(col = "block_trial")

head(dat_truffle_and_dirt, n = 10)

```

## Messy colnames

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  messy_colnames()

head(dat_truffle_and_dirt, n = 10)

```

## Messy headers

```{r}

dat_truffle_and_dirt <- dat_truffle_and_dirt |>
  add_messy_header_row()

head(dat_truffle_and_dirt, n = 10)

# write to desk
readr::write_lines(dat_truffle_and_dirt, "dat_truffle_and_dirt.csv")

# re-import later
messy <- readr::read_csv("dat_truffle_and_dirt.csv")

head(messy)

clean <- readr::read_csv("dat_truffle_and_dirt.csv", skip = 2)

head(clean)

```
